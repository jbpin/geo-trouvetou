// The MIT License (MIT)

// Copyright (c) 2013 Jean-Baptiste Pin

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function GeoPoint(t,i){this.latitude=t,this.longitude=i,this.data,this.getDirection=function(t){var i=0;return this.latitude>t.latitude&&(i=2),this.longitude>t.longitude&&(i+=1),i},this.equals=function(t){return t.latitude==this.latitude&&t.longitude==this.longitude?!0:void 0},this.closer=function(t,i){var e=Math.pow(t.latitude-this.latitude,2)+Math.pow(t.longitude-this.longitude,2),o=Math.pow(i.latitude-this.latitude,2)+Math.pow(i.longitude-this.longitude,2);return o>e?t:i}}function TreeNode(t){this.point=t,this.leaf=[],this.addLeaf=function(t){var i=this.point.getDirection(t);this.leaf[i]?this.leaf[i].addLeaf(t):this.leaf[i]=new TreeNode(t)},this.logPoint=function(t){console.log(t.latitude+" "+t.longitude)},this.find=function(t){var i=this.point.getDirection(t);if(this.leaf[i]){var e=this.leaf[i].find(t),o=t.closer(e.point,this.point);o==this.point&&(e=this);var n,s,l;if(0==i||3==i?(this.leaf[1]&&(s=this.leaf[1].find(t)),this.leaf[2]&&(l=this.leaf[2].find(t))):(this.leaf[0]&&(s=this.leaf[0].find(t)),this.leaf[3]&&(l=this.leaf[3].find(t))),s&&l)o=t.closer(s.point,l.point),n=o==s.point?s:l;else if(s)n=s;else{if(!l)return e;n=l}return o=t.closer(e.point,n.point),o==n.point&&(e=n),e}return this}}function GeoTrouvetou(){this.tree=null,this.addPoint=function(t){this.tree?this.tree.addLeaf(t):this.tree=new TreeNode(t)},this.findClosest=function(t){return null==this.tree?null:this.tree.find(t).point}}"undefined"!=typeof module&&module.exports&&(module.exports={GeoTrouvetou:GeoTrouvetou,GeoPoint:GeoPoint});